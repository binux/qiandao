// Generated by CoffeeScript 1.7.1
(function() {
  var _base, _base1,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if ((_base = Array.prototype).some == null) {
    _base.some = function(f) {
      var x, _i, _len;
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        x = this[_i];
        if (f(x)) {
          return true;
        }
      }
      return false;
    };
  }

  if ((_base1 = Array.prototype).every == null) {
    _base1.every = function(f) {
      var x, _i, _len;
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        x = this[_i];
        if (!f(x)) {
          return false;
        }
      }
      return true;
    };
  }

  define(function(require, exports, module) {
    var analyze_cookies, headers, mime_type, post_data, replace_variables, rm_content, sort, utils, xhr;
    utils = require('/static/utils');
    xhr = function(har) {
      var entry, h, _i, _len, _ref;
      _ref = har.log.entries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        if (((function() {
          var _j, _len1, _ref1, _results;
          _ref1 = entry.request.headers;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            h = _ref1[_j];
            if (h.name === 'X-Requested-With' && h.value === 'XMLHttpRequest') {
              _results.push(h);
            }
          }
          return _results;
        })()).length > 0) {
          entry.filter_xhr = true;
        }
      }
      return har;
    };
    mime_type = function(har) {
      var entry, mt, _i, _len, _ref, _ref1, _ref2;
      _ref = har.log.entries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        mt = (_ref1 = entry.response) != null ? (_ref2 = _ref1.content) != null ? _ref2.mimeType : void 0 : void 0;
        entry.filter_mimeType = (function() {
          switch (false) {
            case !!mt:
              return 'other';
            case mt.indexOf('audio') !== 0:
              return 'media';
            case mt.indexOf('image') !== 0:
              return 'image';
            case mt.indexOf('javascript') === -1:
              return 'javascript';
            case mt !== 'text/html':
              return 'document';
            case mt !== 'text/css' && mt !== 'application/x-pointplus':
              return 'style';
            case mt.indexOf('application') !== 0:
              return 'media';
            default:
              return 'other';
          }
        })();
      }
      return har;
    };
    analyze_cookies = function(har) {
      var cookie, cookie_jar, cookies, entry, error, h, header, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      cookie_jar = new utils.CookieJar();
      _ref = har.log.entries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        cookies = {};
        _ref1 = cookie_jar.getCookiesSync(entry.request.url, {
          now: new Date(entry.startedDateTime)
        });
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          cookie = _ref1[_j];
          cookies[cookie.key] = cookie.value;
        }
        _ref2 = entry.request.cookies;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          cookie = _ref2[_k];
          cookie.checked = false;
          if (cookie.name in cookies) {
            if (cookie.value === cookies[cookie.name]) {
              cookie.from_session = true;
              entry.filter_from_session = true;
            } else {
              cookie.cookie_changed = true;
              entry.filter_cookie_changed = true;
            }
          } else {
            cookie.cookie_added = true;
            entry.filter_cookie_added = true;
          }
        }
        _ref3 = (function() {
          var _len3, _m, _ref3, _ref4, _results;
          _ref4 = (_ref3 = entry.response) != null ? _ref3.headers : void 0;
          _results = [];
          for (_m = 0, _len3 = _ref4.length; _m < _len3; _m++) {
            h = _ref4[_m];
            if (h.name.toLowerCase() === 'set-cookie') {
              _results.push(h);
            }
          }
          return _results;
        })();
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          header = _ref3[_l];
          entry.filter_set_cookie = true;
          try {
            cookie_jar.setCookieSync(header.value, entry.request.url, {
              now: new Date(entry.startedDateTime)
            });
          } catch (_error) {
            error = _error;
            console.error(error);
          }
        }
      }
      return har;
    };
    sort = function(har) {
      har.log.entries = har.log.entries.sort(function(a, b) {
        if (a.pageref > b.pageref) {
          return 1;
        } else if (a.pageref < b.pageref) {
          return -1;
        } else if (a.startedDateTime > b.startedDateTime) {
          return 1;
        } else if (a.startedDateTime < b.startedDateTime) {
          return -1;
        } else {
          return 0;
        }
      });
      return har;
    };
    headers = function(har) {
      var entry, header, i, to_remove_headers, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      to_remove_headers = ['x-devtools-emulate-network-conditions-client-id', 'cookie', 'host', 'content-length'];
      _ref = har.log.entries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        _ref1 = entry.request.headers;
        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
          header = _ref1[i];
          if (_ref2 = header.name.toLowerCase(), __indexOf.call(to_remove_headers, _ref2) < 0) {
            header.checked = true;
          } else {
            header.checked = false;
          }
        }
      }
      return har;
    };
    post_data = function(har) {
      var entry, error, key, result, value, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4;
      _ref = har.log.entries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        if (!((_ref1 = entry.request.postData) != null ? _ref1.text : void 0)) {
          continue;
        }
        if (!(((_ref2 = entry.request.postData) != null ? (_ref3 = _ref2.mimeType) != null ? _ref3.toLowerCase().indexOf("application/x-www-form-urlencoded") : void 0 : void 0) === 0)) {
          entry.request.postData.params = void 0;
          continue;
        }
        result = [];
        try {
          _ref4 = utils.querystring_parse(entry.request.postData.text);
          for (key in _ref4) {
            value = _ref4[key];
            result.push({
              name: key,
              value: value
            });
          }
          entry.request.postData.params = result;
        } catch (_error) {
          error = _error;
          console.error(error);
          entry.request.postData.params = void 0;
          continue;
        }
      }
      return har;
    };
    replace_variables = function(har, variables) {
      var changed, each, entry, error, k, key, obj, query, url, v, value, variables_vk, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4;
      variables_vk = {};
      for (k in variables) {
        v = variables[k];
        if ((k != null ? k.length : void 0) && (v != null ? v.length : void 0)) {
          variables_vk[v] = k;
        }
      }
      _ref = har.log.entries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        try {
          url = utils.url_parse(entry.request.url, true);
        } catch (_error) {
          error = _error;
          continue;
        }
        changed = false;
        _ref1 = url.query;
        for (key in _ref1) {
          value = _ref1[key];
          if (value in variables_vk) {
            url.query[key] = "{{ " + variables_vk[value] + " }}";
            changed = true;
          }
        }
        if (changed) {
          query = utils.querystring_unparse_with_variables(url.query);
          if (query) {
            url.search = "?" + query;
          }
        }
        entry.request.url = utils.url_unparse(url);
        entry.request.queryString = utils.dict2list(url.query);
        _ref2 = har.log.entries;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          entry = _ref2[_j];
          if (((_ref3 = entry.request.postData) != null ? _ref3.params : void 0) == null) {
            continue;
          }
          changed = false;
          _ref4 = entry.request.postData.params;
          for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
            each = _ref4[_k];
            if (each.value in variables_vk) {
              each.value = "{{ " + variables_vk[each.value] + " }}";
              changed = true;
            }
          }
          if (changed) {
            obj = utils.list2dict(entry.request.postData.params);
            entry.request.postData.text = utils.querystring_unparse_with_variables(obj);
          }
        }
      }
      return har;
    };
    rm_content = function(har) {
      var entry, _i, _len, _ref, _ref1, _ref2, _ref3;
      _ref = har.log.entries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        if (((_ref1 = entry.response) != null ? (_ref2 = _ref1.content) != null ? _ref2.text : void 0 : void 0) != null) {
          if ((_ref3 = entry.response) != null) {
            _ref3.content.text = void 0;
          }
        }
      }
      return har;
    };
    exports = {
      analyze: function(har, variables) {
        if (variables == null) {
          variables = {};
        }
        if (har.log) {
          return replace_variables(xhr(mime_type(analyze_cookies(headers(sort(post_data(rm_content(har))))))), variables);
        } else {
          return har;
        }
      },
      recommend_default: function(har) {
        var domain, entry, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
        domain = null;
        _ref = har.log.entries;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          entry = _ref[_i];
          if (!domain) {
            domain = utils.get_domain(entry.request.url);
          }
          if (exports.variables_in_entry(entry).length > 0) {
            entry.recommend = true;
          } else if (domain !== utils.get_domain(entry.request.url)) {
            entry.recommend = false;
          } else if ((_ref1 = (_ref2 = entry.response) != null ? _ref2.status : void 0) === 304 || _ref1 === 0) {
            entry.recommend = false;
          } else if (Math.floor(((_ref3 = entry.response) != null ? _ref3.status : void 0) / 100) === 3) {
            entry.recommend = true;
          } else if (((_ref4 = entry.response) != null ? (_ref5 = _ref4.cookies) != null ? _ref5.length : void 0 : void 0) > 0) {
            entry.recommend = true;
          } else if (entry.request.method === 'POST') {
            entry.recommend = true;
          } else {
            entry.recommend = false;
          }
        }
        return har;
      },
      recommend: function(har) {
        var c, checked, cookie, e, entry, related_cookies, set_cookie, start_time, started, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _ref, _ref1, _ref2, _ref3, _ref4, _related_cookies;
        _ref = har.log.entries;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          entry = _ref[_i];
          entry.recommend = entry.checked ? true : false;
        }
        checked = (function() {
          var _j, _len1, _ref1, _results;
          _ref1 = har.log.entries;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            e = _ref1[_j];
            if (e.checked) {
              _results.push(e);
            }
          }
          return _results;
        })();
        if (checked.length === 0) {
          return exports.recommend_default(har);
        }
        related_cookies = [];
        for (_j = 0, _len1 = checked.length; _j < _len1; _j++) {
          entry = checked[_j];
          _ref1 = entry.request.cookies;
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            cookie = _ref1[_k];
            related_cookies.push(cookie.name);
          }
        }
        started = false;
        _ref2 = har.log.entries;
        for (_l = _ref2.length - 1; _l >= 0; _l += -1) {
          entry = _ref2[_l];
          if (!started) {
            started = entry.checked;
          }
          if (!started) {
            continue;
          }
          if (!((_ref3 = entry.response) != null ? _ref3.cookies : void 0)) {
            continue;
          }
          start_time = new Date(entry.startedDateTime);
          set_cookie = (function() {
            var _len3, _m, _ref4, _ref5, _results;
            _ref5 = (_ref4 = entry.response) != null ? _ref4.cookies : void 0;
            _results = [];
            for (_m = 0, _len3 = _ref5.length; _m < _len3; _m++) {
              cookie = _ref5[_m];
              if (!cookie.expires || (new Date(cookie.expires)) > start_time) {
                _results.push(cookie.name);
              }
            }
            return _results;
          })();
          _related_cookies = (function() {
            var _len3, _m, _results;
            _results = [];
            for (_m = 0, _len3 = related_cookies.length; _m < _len3; _m++) {
              c = related_cookies[_m];
              if (__indexOf.call(set_cookie, c) < 0) {
                _results.push(c);
              }
            }
            return _results;
          })();
          if (related_cookies.length > _related_cookies.length) {
            entry.recommend = true;
            related_cookies = _related_cookies;
            _ref4 = entry.request.cookies;
            for (_m = 0, _len3 = _ref4.length; _m < _len3; _m++) {
              cookie = _ref4[_m];
              related_cookies.push(cookie.name);
            }
          }
        }
        return har;
      },
      variables: function(string) {
        var m, re, _results;
        re = /{{\s*([\w]+)[^}]*?\s*}}/g;
        _results = [];
        while (m = re.exec(string)) {
          _results.push(m[1]);
        }
        return _results;
      },
      variables_in_entry: function(entry) {
        var c, h, result, _ref;
        result = [];
        [
          [entry.request.url], (function() {
            var _i, _len, _ref, _results;
            _ref = entry.request.headers;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              h = _ref[_i];
              if (h.checked) {
                _results.push(h.name);
              }
            }
            return _results;
          })(), (function() {
            var _i, _len, _ref, _results;
            _ref = entry.request.headers;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              h = _ref[_i];
              if (h.checked) {
                _results.push(h.value);
              }
            }
            return _results;
          })(), (function() {
            var _i, _len, _ref, _results;
            _ref = entry.request.cookies;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              c = _ref[_i];
              if (c.checked) {
                _results.push(c.name);
              }
            }
            return _results;
          })(), (function() {
            var _i, _len, _ref, _results;
            _ref = entry.request.cookies;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              c = _ref[_i];
              if (c.checked) {
                _results.push(c.value);
              }
            }
            return _results;
          })(), [(_ref = entry.request.postData) != null ? _ref.text : void 0]
        ].map(function(list) {
          var each, string, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = list.length; _i < _len; _i++) {
            string = list[_i];
            _results.push((function() {
              var _j, _len1, _ref, _results1;
              _ref = exports.variables(string);
              _results1 = [];
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                each = _ref[_j];
                if (__indexOf.call(result, each) < 0) {
                  _results1.push(result.push(each));
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            })());
          }
          return _results;
        });
        if (result.length > 0) {
          entry.filter_variables = true;
        } else {
          entry.filter_variables = false;
        }
        return result;
      },
      find_variables: function(har) {
        var each, entry, result, _i, _j, _len, _len1, _ref, _ref1;
        result = [];
        _ref = har.log.entries;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          entry = _ref[_i];
          _ref1 = this.variables_in_entry(entry);
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            each = _ref1[_j];
            result.push(each);
          }
        }
        return result;
      }
    };
    return exports;
  });

}).call(this);
